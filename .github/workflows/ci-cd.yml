# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ master, staging ]
  pull_request:
    branches: [ master, staging ]

env:
  REGION: us-central1
  REGISTRY: ${{ env.REGION }}-docker.pkg.dev
  PROJECT_PATH: magic-project
  TF_VERSION: "1.5.7"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/api/requirements.txt
          pip install pytest pytest-cov httpx
          
      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -R
          
      - name: Compile Python code
        run: |
          python -m compileall src/api

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/api/requirements.txt
          pip install pytest pytest-cov httpx
          
      - name: Run tests with coverage
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src/api
          python -m pytest tests/api/ --cov=src/api --cov-report=term-missing

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3
      
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        
      # Create Artifact Registry repository if it doesn't exist
      - name: Create Artifact Registry Repository
        run: |
          gcloud artifacts repositories create ${{ env.PROJECT_PATH }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for ${{ env.PROJECT_PATH }}"
        continue-on-error: true
        
      - name: Configure Docker auth for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        
      - name: Build and push Docker image
        run: |
          cd src/api
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}:${{ github.sha }} .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}:${{ github.sha }}

  deploy_staging:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
          
      - name: Terraform Init and Apply
        run: |
          cd terraform/environments/staging
          terraform init
          terraform validate
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="container_image=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}:${{ github.sha }}" \
            -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

  deploy_prod:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
          
      - name: Terraform Init and Apply
        id: deploy
        run: |
          cd terraform/environments/prod
          terraform init
          terraform validate
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="container_image=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}:${{ github.sha }}" \
            -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan